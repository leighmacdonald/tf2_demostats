use enumset::{EnumSet, EnumSetType};
use num_enum::{IntoPrimitive, TryFromPrimitive};
use serde::{Deserialize, Serialize};

#[derive(
    Copy, Clone, Deserialize, Serialize, IntoPrimitive, TryFromPrimitive, PartialEq, Debug, Default,
)]
#[repr(u16)]
pub enum RoundState {
    #[default]
    Init = 0,
    Pregame = 1,
    StartGame = 2,
    PreRound = 3,
    Running = 4,
    TeamWin = 5,
    Restart = 6,
    Stalemate = 7,
    GameOver = 8,
    Bonus = 9,
    BetweenRounds = 10,
}

pub const INVALID_HANDLE: u32 = 0x1fffff;

#[derive(
    Copy, Clone, Deserialize, Serialize, IntoPrimitive, TryFromPrimitive, PartialEq, Debug, Default,
)]
#[repr(u16)]
pub enum GrenadeType {
    #[default]
    Pipe = 0, // Stock and Iron Bomber -- distinguish those by model id if necessary
    Sticky = 1,
    StickyJumper = 2,
    Cannonball = 3,
}

#[derive(
    Copy, Clone, Deserialize, Serialize, IntoPrimitive, TryFromPrimitive, PartialEq, Debug,
)]
#[repr(u16)]
pub enum DamageType {
    Normal = 0,
    Headshot = 1,
    Backstab = 2,
    Burning = 3,
    WrenchFix = 4,
    Minigun = 5,
    Suicide = 6,
    TauntHadouken = 7,
    BurningFlare = 8,
    TauntHighNoon = 9,
    TauntGrandSlam = 10,
    PenetrateMyTeam = 11,
    PenetrateAllPlayers = 12,
    TauntFencing = 13,
    PenetrateNonburningTeammate = 14,
    TauntArrowStab = 15,
    Telefrag = 16,
    BurningArrow = 17,
    Flyingburn = 18,
    PumpkinBomb = 19,
    Decapitation = 20,
    TauntGrenade = 21,
    Baseball = 22,
    ChargeImpact = 23,
    TauntBarbarianSwing = 24,
    AirStickyBurst = 25,
    DefensiveSticky = 26,
    Pickaxe = 27,
    RocketDirecthit = 28,
    TauntUberslice = 29,
    PlayerSentry = 30,
    StandardSticky = 31,
    ShotgunRevengeCrit = 32,
    TauntEngineerGuitarSmash = 33,
    Bleeding = 34,
    GoldWrench = 35,
    CarriedBuilding = 36,
    ComboPunch = 37,
    TauntEngineerArmKill = 38,
    FishKill = 39,
    TriggerHurt = 40,
    DecapitationBoss = 41,
    StickbombExplosion = 42,
    AegisRound = 43,
    FlareExplosion = 44,
    BootsStomp = 45,
    Plasma = 46,
    PlasmaCharged = 47,
    PlasmaGib = 48,
    PracticeSticky = 49,
    EyeballRocket = 50,
    HeadshotDecapitation = 51,
    TauntArmageddon = 52,
    FlarePellet = 53,
    Cleaver = 54,
    CleaverCrit = 55,
    SapperRecorderDeath = 56,
    MerasmusPlayerBomb = 57,
    MerasmusGrenade = 58,
    MerasmusZap = 59,
    MerasmusDecapitation = 60,
    CannonballPush = 61,
    TauntAllclassGuitarRiff = 62,
    Throwable = 63,
    ThrowableKill = 64,
    SpellTeleport = 65,
    SpellSkeleton = 66,
    SpellMirv = 67,
    SpellMeteor = 68,
    SpellLightning = 69,
    SpellFireball = 70,
    SpellMonoculus = 71,
    SpellBlastjump = 72,
    SpellBats = 73,
    SpellTiny = 74,
    Kart = 75,
    GiantHammer = 76,
    RuneReflect = 77,
    DragonsFuryIgnite = 78,
    DragonsFuryBonusBurning = 79,
    SlapKill = 80,
    Croc = 81,
    TauntGasBlast = 82,
    AxtinguisherBoosted = 83,
    KrampusMelee = 84,
    KrampusRanged = 85,
    TauntTrickShot = 86,
}

#[derive(
    Copy, Clone, Deserialize, Serialize, IntoPrimitive, TryFromPrimitive, PartialEq, Debug,
)]
#[repr(u8)]
pub enum DamageEffect {
    Normal = 4,
    Crit = 0,
    MiniCrit = 1,
    DoubleDonk = 2,
    WaterSplash = 3,
    DragonsFuryBonus = 5,
    Stomp = 6,
}

#[derive(Deserialize, Serialize, IntoPrimitive, TryFromPrimitive, PartialEq, Debug)]
#[repr(u16)]
pub enum WeaponId {
    None = 0,
    Bat = 1,
    BatWood = 2,
    Bottle = 3,
    Fireaxe = 4,
    Club = 5,
    Crowbar = 6,
    Knife = 7,
    Fists = 8,
    Shovel = 9,
    Wrench = 10,
    Bonesaw = 11,
    ShotgunPrimary = 12,
    ShotgunSoldier = 13,
    ShotgunHwg = 14,
    ShotgunPyro = 15,
    Scattergun = 16,
    Sniperrifle = 17,
    Minigun = 18,
    Smg = 19,
    SyringegunMedic = 20,
    Tranq = 21,
    Rocketlauncher = 22,
    Grenadelauncher = 23,
    Pipebomblauncher = 24,
    Flamethrower = 25,
    GrenadeNormal = 26,
    GrenadeConcussion = 27,
    GrenadeNail = 28,
    GrenadeMirv = 29,
    GrenadeMirvDemoman = 30,
    GrenadeNapalm = 31,
    GrenadeGas = 32,
    GrenadeEmp = 33,
    GrenadeCaltrop = 34,
    GrenadePipebomb = 35,
    GrenadeSmokeBomb = 36,
    GrenadeHeal = 37,
    GrenadeStunball = 38,
    GrenadeJar = 39,
    GrenadeJarMilk = 40,
    Pistol = 41,
    PistolScout = 42,
    Revolver = 43,
    Nailgun = 44,
    Pda = 45,
    PdaEngineerBuild = 46,
    PdaEngineerDestroy = 47,
    PdaSpy = 48,
    Builder = 49,
    Medigun = 50,
    GrenadeMirvbomb = 51,
    FlamethrowerRocket = 52,
    GrenadeDemoman = 53,
    SentryBullet = 54,
    SentryRocket = 55,
    Dispenser = 56,
    Invis = 57,
    Flaregun = 58,
    Lunchbox = 59,
    Jar = 60,
    CompoundBow = 61,
    BuffItem = 62,
    PumpkinBomb = 63,
    Sword = 64,
    RocketlauncherDirecthit = 65,
    Lifeline = 66,
    LaserPointer = 67,
    DispenserGun = 68,
    SentryRevenge = 69,
    JarMilk = 70,
    HandgunScoutPrimary = 71,
    BatFish = 72,
    Crossbow = 73,
    Stickbomb = 74,
    HandgunScoutSecondary = 75,
    SodaPopper = 76,
    SniperrifleDecap = 77,
    Raygun = 78,
    ParticleCannon = 79,
    MechanicalArm = 80,
    DrgPomson = 81,
    BatGiftwrap = 82,
    GrenadeOrnamentBall = 83,
    FlaregunRevenge = 84,
    PepBrawlerBlaster = 85,
    Cleaver = 86,
    GrenadeCleaver = 87,
    StickyBallLauncher = 88,
    GrenadeStickyBall = 89,
    ShotgunBuildingRescue = 90,
    Cannon = 91,
    Throwable = 92,
    GrenadeThrowable = 93,
    PdaSpyBuild = 94,
    GrenadeWaterballoon = 95,
    HarvesterSaw = 96,
    Spellbook = 97,
    SpellbookProjectile = 98,
    SniperrifleClassic = 99,
    Parachute = 100,
    Grapplinghook = 101,
    PasstimeGun = 102,
    SniperrifleRevolver = 103,
    ChargedSmg = 104,
    BreakableSign = 105,
    Rocketpack = 106,
    Slap = 107,
    JarGas = 108,
    GrenadeJarGas = 109,
    FlameBall = 110,
}

impl WeaponId {
    pub fn is_melee(&self) -> bool {
        matches!(
            self,
            WeaponId::Bat
                | WeaponId::BatWood
                | WeaponId::Bottle
                | WeaponId::Fireaxe
                | WeaponId::Club
                | WeaponId::Crowbar
                | WeaponId::Knife
                | WeaponId::Fists
                | WeaponId::Shovel
                | WeaponId::Wrench
                | WeaponId::Bonesaw
                | WeaponId::Sword
                | WeaponId::BatFish
                | WeaponId::MechanicalArm
                | WeaponId::BatGiftwrap
                | WeaponId::Cleaver
                | WeaponId::HarvesterSaw
                | WeaponId::Slap
        )
    }
}

#[repr(u32)]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, TryFromPrimitive)]
pub enum PlayerAnimation {
    AttackPrimary = 0,
    AttackSecondary = 1,
    AttackGrenade = 2,
    Reload = 3,
    ReloadLoop = 4,
    ReloadEnd = 5,
    Jump = 6,
    Swim = 7,
    Die = 8,
    FlinchChest = 9,
    FlinchHead = 10,
    FlinchLeftarm = 11,
    FlinchRightarm = 12,
    FlinchLeftleg = 13,
    FlinchRightleg = 14,
    Doublejump = 15,
    Cancel = 16,
    Spawn = 17,
    SnapYaw = 18,
    Custom = 19, // Used to play specific activities
    CustomGesture = 20,
    CustomSequence = 21, // Used to play specific sequences
    CustomGestureSequence = 22,
    AttackPre = 23,
    AttackPost = 24,
    Grenade1Draw = 25,
    Grenade2Draw = 26,
    Grenade1Throw = 27,
    Grenade2Throw = 28,
    VoiceCommandGesture = 29,
    DoublejumpCrouch = 30,
    StunBegin = 31,
    StunMiddle = 32,
    StunEnd = 33,
    PasstimeThrowBegin = 34,
    PasstimeThrowMiddle = 35,
    PasstimeThrowEnd = 36,
    ContractPdaBegin = 37,
    ContractPdaMiddle = 38,
    ContractPdaEnd = 39,
    AttackPrimarySuper = 40,
}

#[repr(u16)]
#[derive(Debug, Serialize, Deserialize, TryFromPrimitive, EnumSetType)]
#[enumset(repr = "u16")]
pub enum Death {
    Domination = 0,
    AssisterDomination = 1,
    Revenge = 2,
    AssisterRevenge = 3,
    FirstBlood = 4,
    Feign = 5,
    Interrupted = 6,
    Gibbed = 7,
    Purgatory = 8,
    Miniboss = 9,
    Australium = 10,
}

#[repr(u16)]
#[derive(Debug, Serialize, Deserialize, TryFromPrimitive, EnumSetType)]
#[enumset(repr = "u128")]
pub enum PlayerCondition {
    Aiming = 0, // Sniper and heavy
    Zoomed = 1,
    Disguising = 2,
    Disguised = 3,
    Stealthed = 4,
    Invulnerable = 5,
    Teleported = 6,
    Taunting = 7,
    InvulnerableWearingOff = 8,
    StealthedBlink = 9,
    SelectedToTeleport = 10,
    CritBoosted = 11, // unused? see the other variants; and kritz seems to be on _condition_bits
    TemporaryDamageBonus = 12,
    FeignDeath = 13,
    Phase = 14,
    Stunned = 15,
    Offensebuff = 16,
    ShieldCharge = 17,
    DemoBuff = 18,
    EnergyBuff = 19,
    RadiusHeal = 20,
    HealthBuff = 21,
    Burning = 22,
    HealthOverhealed = 23,
    Urine = 24,
    Bleeding = 25,
    DefenseBuff = 26,
    MadMilk = 27,
    MegaHeal = 28,
    RegenOnDamageBuff = 29,
    MarkedForDeath = 30,
    NoHealingDamageBuff = 31,
    SpeedBoost = 32,
    CritBoostedPumpkin = 33,
    CritBoostedUserBuff = 34,
    CritBoostedDemoCharge = 35,
    SodaPopperHype = 36,
    CritBoostedFirstBlood = 37,
    CritBoostedBonusTime = 38,
    CritBoostedCtfCapture = 39,
    CritBoostedOnKill = 40,
    CannotSwitchFromMelee = 41,
    DefenseBuffNoCritBlock = 42,
    ReprogrammedBot = 43,
    CritBoostedRageBuff = 44,
    DefenseBuffHigh = 45,
    SniperchargeRageBuff = 46,
    DisguiseWearingOff = 47,
    MarkedForDeathSilent = 48,
    DisguisedAsDispenser = 49,
    BotSapped = 50,
    InvulnerableHideUnlessDamaged = 51,
    InvulnerableUserBuff = 52,
    HalloweenBombHead = 53,
    HalloweenThriller = 54,
    RadiushealOnDamage = 55,
    CritBoostedCardEffect = 56,
    InvulnerableCardEffect = 57,
    MedigunUberBulletResist = 58,
    MedigunUberBlastResist = 59,
    MedigunUberFireResist = 60,
    MedigunSmallBulletResist = 61,
    MedigunSmallBlastResist = 62,
    MedigunSmallFireResist = 63,
    StealthedUserBuff = 64,
    MedigunDebuff = 65,
    StealthedUserBuffFading = 66,
    BulletImmune = 67,
    BlastImmune = 68,
    FireImmune = 69,
    PreventDeath = 70,
    MvmBotStunRadiowave = 71,
    HalloweenSpeedBoost = 72,
    HalloweenQuickHeal = 73,
    HalloweenGiant = 74,
    HalloweenTiny = 75,
    HalloweenInHell = 76,
    HalloweenGhostMode = 77,
    MinicritboostedOnKill = 78,
    ObscuredSmoke = 79,
    Parachute = 80,
    BlastJumping = 81,
    HalloweenKart = 82,
    HalloweenKartDash = 83,
    BalloonHead = 84,
    MeleeOnly = 85,
    SwimmingCurse = 86,
    FreezeInput = 87,
    HalloweenKartCage = 88,
    Donotuse0 = 89,
    RuneStrength = 90,
    RuneHaste = 91,
    RuneRegen = 92,
    RuneResist = 93,
    RuneVampire = 94,
    RuneReflect = 95,
    RunePrecision = 96,
    RuneAgility = 97,
    Grapplinghook = 98,
    GrapplinghookSafefall = 99,
    GrapplinghookLatched = 100,
    GrapplinghookBleeding = 101,
    AfterburnImmune = 102,
    RuneKnockout = 103,
    RuneImbalance = 104,
    CritBoostedRuneTemp = 105,
    PasstimeInterception = 106,
    SwimmingNoEffects = 107,
    Purgatory = 108,
    RuneKing = 109,
    RunePlague = 110,
    RuneSupernova = 111,
    Plague = 112,
    KingBuffed = 113,
    TeamGlows = 114,
    KnockedIntoAir = 115,
    CompetitiveWinner = 116,
    CompetitiveLoser = 117,
    HealingDebuff = 118,
    PasstimePenaltyDebuff = 119,
    GrappledToPlayer = 120,
    GrappledByPlayer = 121,
    ParachuteDeployed = 122,
    GasPasser = 123,
    BurningPyro = 124,
    ThermalThrusterJumping = 125,
    LostFooting = 126,
    AirCurrent = 127,
    // These are in Cond4 -- ignore for now so that we can fit in a u128
    //
    // HalloweenHellHeal = 128,
    // PowerupModeDominant = 129,
    // ImmuneToPushback = 130,
}

pub fn update_condition<const OFFSET: usize>(condition: &mut EnumSet<PlayerCondition>, bits: u32) {
    let mask: u128 = 0xffffffff << OFFSET;
    let new_cond = (condition.as_repr() & !mask) | ((bits as u128) << OFFSET);
    *condition = EnumSet::<PlayerCondition>::from_repr(new_cond);
}

#[repr(u32)]
#[derive(Debug, Serialize, Deserialize, TryFromPrimitive, EnumSetType)]
#[enumset(repr = "u32")]
pub enum Damage {
    Crush = 0,
    Bullet = 1,
    Slash = 2,
    Burn = 3,
    Vehicle = 4,
    Fall = 5,
    Blast = 6,
    Club = 7,
    Shock = 8,
    Sonic = 9,
    NoFalloff = 10,
    PreventPhysicsForce = 11,
    NeverGib = 12,
    AlwaysGib = 13,
    Drown = 14,
    Paralyze = 15,
    NerveGas = 16,
    NoFalloffTooClose = 17,
    HalfFalloff = 18,
    DrownRecover = 19,
    Crit = 20,
    DoFalloff = 21,
    RemoveNoRagdoll = 22,
    PhysGun = 23,
    Ignite = 24,
    HitLocation = 25, // Sniper, ambassador
    DontCountTowardsCritRate = 26,
    Melee = 27,
    Direct = 28,
    Buckshot = 29,
}

#[repr(u32)]
#[derive(Debug, Serialize, Deserialize, TryFromPrimitive, EnumSetType)]
#[enumset(repr = "u32")]
pub enum Flags {
    OnGround = 0,
    Ducking = 1,
    WaterJump = 2,
    OnTrain = 3,
    InRain = 4,
    Frozen = 5,
    AtControls = 6,
    Client = 7,
    FakeClient = 8,
    InWater = 9,
    Fly = 10,
    Swim = 11,
    Conveyor = 12,
    Npc = 13,
    GodMode = 14,
    Notarget = 15,
    AimTarget = 16,
    PartialGround = 17,
    StaticProp = 18,
    Graphed = 19,
    Grenade = 20,
    StepMovement = 21,
    DontTouch = 22,
    BaseVelocity = 23,
    WorldBrush = 24,
    Object = 25,
    KillMe = 26,
    OnFire = 27,
    Dissolving = 28,
    TransRagdoll = 29,
    UnblockableByPlayer = 30,
}

#[repr(u16)]
#[derive(Debug, Serialize, Deserialize, TryFromPrimitive, EnumSetType)]
#[enumset(repr = "u16")]
pub enum Effects {
    BoneMerge = 0,
    BrightLight = 1,
    DimLight = 2,
    NoInterp = 3,
    NoShadow = 4,
    NoDraw = 5,
    NoReceiveShadow = 6,
    BoneMergeFastCull = 7,
    ItemBlink = 8,
    ParentAnimates = 9,
}
